require 'rails_helper'

RSpec.describe "Chats", type: :request do

  before do
    @chat_app = FactoryBot.create(:chat_application)
    BASE_URL = "/api/v1/applications/#{@chat_app.token}/chats"
  end

  describe "GET /index" do
    it "returns http success with no data" do
      get "#{BASE_URL}/"
      expect(response).to have_http_status(:ok)
      data = JSON.parse(response.body)
      expect(data['status']).to eq('success')
      expect(data['data'].length).to eq(0)
    end

    it "returns http success with data" do
      chat = FactoryBot.create(:chat, chat_id: 1, chat_application: @chat_app).as_json
      get "#{BASE_URL}/"
      expect(response).to have_http_status(:ok)
      data = JSON.parse(response.body)
      expect(data['status']).to eq('success')
      expect(data['data'].length).to eq(1)
      expect(data['data'].first['name']).to eq(chat['name'])
      expect(data['data'].first['chat_id']).to eq(chat['chat_id'])
    end
  end

  describe 'GET /:chat_id' do
    it 'returns http success with data' do
      chat = FactoryBot.create(:chat, chat_id: 1, chat_application: @chat_app).as_json
      get "#{BASE_URL}/#{chat['chat_id']}"
      expect(response).to have_http_status(:ok)
      data = JSON.parse(response.body)
      expect(data['status']).to eq('success')
      expect(data['data']['name']).to eq(chat['name'])
    end

    it 'returns http error not found' do
      get "#{BASE_URL}/invalid_chat_id"
      expect(response).to have_http_status(:not_found)
      data = JSON.parse(response.body)
      expect(data['status']).to eq('error')
    end
  end

  describe "POST /" do
    it "returns http success with data" do
      chat = FactoryBot.build(:chat, chat_id: -1, chat_application: @chat_app).as_json
      post "#{BASE_URL}/", params: chat
      expect(response).to have_http_status(:created)
      data = JSON.parse(response.body)
      expect(data['status']).to eq('success')
      data = data['data']
      expect(data['name']).to eq(chat['name'])
      expect(data['chat_id']).to eq(1)
      expect(data['chat_id']).to_not eq(chat['chat_id']) # chat id is generated by the server even if it is provided
    end

    it "returns http error with invalid data" do
      chat = FactoryBot.build(:chat, chat_id: 1, chat_application: @chat_app).as_json
      chat.delete('name')
      post "#{BASE_URL}/", params: chat
      expect(response).to have_http_status(:bad_request)
      data = JSON.parse(response.body)
      expect(data['status']).to eq('error')
    end


    it "returns chat_id = 1 when it is the first chat in another application" do
      chat1 = FactoryBot.build(:chat, chat_id: -1, chat_application: @chat_app).as_json
      post "#{BASE_URL}/", params: chat1
      data1 = JSON.parse(response.body)['data']
      expect(data1['chat_id']).to eq(1)

      chat_app2 = FactoryBot.create(:chat_application)
      chat2 = FactoryBot.build(:chat, chat_id: -1, chat_application: chat_app2).as_json
      BASE_URL2 = "/api/v1/applications/#{chat_app2.token}/chats"
      post "#{BASE_URL2}/", params: chat2
      data2 = JSON.parse(response.body)['data']
      expect(data2['chat_id']).to eq(1)

      expect(chat1).to_not eq(chat2)
      expect(@chat_app).to_not eq(chat_app2)
    end

  end

  describe "PATCH /:chat_id" do
    it "returns http success with data" do
      chat = FactoryBot.create(:chat, chat_id: 1, chat_application: @chat_app).as_json
      new_name = 'new_name'
      patch "#{BASE_URL}/#{chat['chat_id']}", params: {name: new_name }
      expect(response).to have_http_status(:ok)
      data = JSON.parse(response.body)
      expect(data['status']).to eq('success')
      data = data['data']
      expect(data['name']).to eq(new_name)
    end

    it "returns http error with invalid data" do
      chat = FactoryBot.create(:chat, chat_id: 1, chat_application: @chat_app).as_json
      patch "#{BASE_URL}/#{chat['chat_id']}"
      expect(response).to have_http_status(:bad_request)
      data = JSON.parse(response.body)
      expect(data['status']).to eq('error')
    end

    it "returns http error not found" do
      patch "#{BASE_URL}/invalid_chat_id", params: {name: 'new_name'}
      expect(response).to have_http_status(:not_found)
      data = JSON.parse(response.body)
      expect(data['status']).to eq('error')
    end
  end

  describe "DELETE /:chat_id" do
    it "returns http success with data" do
      chat = FactoryBot.create(:chat, chat_id: 1, chat_application: @chat_app).as_json
      delete "#{BASE_URL}/#{chat['chat_id']}"
      expect(response).to have_http_status(:ok)
      data = JSON.parse(response.body)
      expect(data['status']).to eq('success')
    end

    it "returns http error not found" do
      delete "#{BASE_URL}/invalid_chat_id"
      expect(response).to have_http_status(:not_found)
      data = JSON.parse(response.body)
      expect(data['status']).to eq('error')
    end
  end

end
